package com.photo.gallery.fragments;

import android.app.ProgressDialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapRegionDecoder;
import android.graphics.Rect;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.ResourceDecoder;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.load.engine.Resource;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.bumptech.glide.load.resource.bitmap.BitmapResource;
import com.bumptech.glide.load.resource.drawable.GlideDrawable;
import com.bumptech.glide.load.resource.gif.GifDrawable;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.github.chrisbanes.photoview.PhotoView;
import com.google.android.gms.ads.AdSize;
import com.photo.gallery.R;
import com.photo.gallery.models.FileItem;
import com.photo.gallery.utils.ConstValue;
import com.photo.gallery.utils.DateUtils;
import com.photo.gallery.utils.DbUtils;
import com.photo.gallery.utils.Flog;
import com.photo.gallery.utils.ResizeImage;
import com.photo.gallery.utils.SharedPrefUtil;
import com.photo.gallery.utils.Utils;
import com.wave.lib_crs.AdmobBannerHelper;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;

import bsoft.com.lib_filter.filter.gpu.util.BitmapUtil;

/**
 * Created by Tung on 3/23/2018.
 */

public class PhotoViewerFragment extends BaseFragment implements View.OnClickListener {

    public static final String PATH_TO_FAVOURITE_FOLDER = Environment.getExternalStoragePublicDirectory(
            Environment.DIRECTORY_PICTURES).getAbsolutePath() + File.separator
            + "Favourites";
    private static final String TAG = PhotoViewerFragment.class.getSimpleName();
    private static final boolean FLAG_LOAD_GLIDE = false;
    private final boolean OLD_CODE = false;
    private View btnBack, btnRotate, btnDelete, btnShare, btnMore;
    private ImageView btnFavourite;
    private TextView tvNamePhoto, tvDatePhoto;
    private PhotoView ivPhoto;
    private FileItem mFileItem = null;
    private ProgressDialog progressDialog = null;
    private OnPhotoViewerListener listener = null;
    private boolean mIsFavourited = false;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_photo_viewer, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        initBannerAdmob();
        initDialog();
        initViews();
        if (listener != null) {
            listener.onPhotoViewerFragmentReady();
        }
    }

    private void initBannerAdmob() {
        AdmobBannerHelper.init(mContext, (ViewGroup) getView().findViewById(R.id.admob_banner))
                .setAdUnitId(getString(R.string.smart_banner_ad_id))
                .setAdSize(AdSize.SMART_BANNER)
                .loadAd();
    }

    private void initViews() {

        View viewParent = getView();
        if (viewParent == null) {
            return;
        }
        viewParent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // DO NOTHING.
            }
        });

        btnBack = viewParent.findViewById(R.id.btn_back);
        btnFavourite = viewParent.findViewById(R.id.btn_favourite);
        btnRotate = viewParent.findViewById(R.id.btn_rotate);
        btnDelete = viewParent.findViewById(R.id.btn_delete);
        btnShare = viewParent.findViewById(R.id.btn_share);
        btnMore = viewParent.findViewById(R.id.btn_more);

        tvNamePhoto = (TextView) viewParent.findViewById(R.id.tv_name_photo);
        tvDatePhoto = (TextView) viewParent.findViewById(R.id.tv_date_photo);

        ivPhoto = (PhotoView) viewParent.findViewById(R.id.iv_photo);
    }

    private void initDialog() {
        progressDialog = new ProgressDialog(mContext);
        progressDialog.setCanceledOnTouchOutside(false);
    }

    private void showDialog() {
        if (progressDialog != null) {
            progressDialog.show();
        }
    }

    private void hideDialog() {
        if (progressDialog != null && progressDialog.isShowing()) {
            progressDialog.dismiss();
        }
    }

    public void open(FileItem fileItem) {
        mFileItem = fileItem;

        if (mFileItem == null) {
            toastLoadGalleryFailed();
            return;
        }

        if (OLD_CODE) {
            File file = new File(mFileItem.path);
            Flog.d(TAG, "path parent 1=" + file.getParent());
            Flog.d(TAG, "path parent 2=" + PATH_TO_FAVOURITE_FOLDER);
            if (file.exists() && file.getParent().equals(PATH_TO_FAVOURITE_FOLDER)) {
                btnFavourite.setVisibility(View.GONE);
            } else {
                btnFavourite.setVisibility(View.VISIBLE);
                mIsFavourited = checkFileFavorited(mFileItem);
                toggleFavouriteIcon();
            }
        } else {
            mIsFavourited = checkFileFavorited1(mFileItem);
            toggleFavouriteIcon();
        }

        showDialog();
        updateImage();

        String name = mFileItem.name;
        setNamePhoto(name);

        String dateFormated = DateUtils.getDate(Utils.parseLong(mFileItem.date_modified), DateUtils.FORMAT_DATE_2);
        setDatePhoto(dateFormated);
    }

    private boolean checkFileFavorited1(FileItem fileItem) {
        ArrayList<FileItem> list = DbUtils.parseFavourites();
        for (int i = 0; i < list.size(); i++) {
            FileItem item = list.get(i);
            if (item.equals(fileItem)) {
                return true;
            }
        }
        return false;
    }

    private void setDatePhoto(String dateFormated) {
        tvDatePhoto.setText(dateFormated);
    }

    private void setNamePhoto(String name) {
        tvNamePhoto.setText(name);
    }

    private void toastLoadGalleryFailed() {
        Toast.makeText(mContext, getString(R.string.load_gallery_failed), Toast.LENGTH_SHORT).show();
    }

    public void setValues() {

        btnBack.setOnClickListener(this);
        btnFavourite.setOnClickListener(this);
        btnRotate.setOnClickListener(this);
        btnDelete.setOnClickListener(this);
        btnShare.setOnClickListener(this);
        btnMore.setOnClickListener(this);
    }

    public PhotoViewerFragment setListener(OnPhotoViewerListener listener) {
        this.listener = listener;
        return this;
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        switch (id) {
            case R.id.btn_back:
                if (listener != null) {
                    listener.onBackPhotoViewerFragment();
                }
                break;
            case R.id.btn_favourite:

                toggleFavouriteBtn();
                if (listener != null) {
                    listener.onUpdateToFavouriteAlbum();
                }
                break;
            case R.id.btn_rotate:
                // do nothing
                break;
            case R.id.btn_delete:
                if (listener != null) {
                    listener.onDeletePhotoViewerFragment(mFileItem);
                }
                break;
            case R.id.btn_share:
                if (listener != null) {
                    listener.onSharePhotoViewerFragment(mFileItem);
                }
                break;
            case R.id.btn_more:
                if (listener != null) {
                    listener.onMorePhotoViewerFragment(mFileItem);
                }
                break;
        }
    }

    private void toggleFavouriteIcon() {
        btnFavourite.setImageResource(mIsFavourited ? R.drawable.ic_favorite_check : R.drawable.ic_favorite);
    }

    private void toggleFavouriteBtn() {
        mIsFavourited = !mIsFavourited;
        toggleFavouriteIcon();

        if (OLD_CODE) {
            if (listener != null) {
                if (mIsFavourited) {

                    String oldPaths = SharedPrefUtil.getInstance().getString(ConstValue.EXTRA_FAVOURITED_FILES, "");
                    String newPaths = oldPaths + ConstValue.SEPARATE_SYMBOL + mFileItem.path;
                    SharedPrefUtil.getInstance().putString(ConstValue.EXTRA_FAVOURITED_FILES, newPaths);

                    listener.onCreateFileToFavouriteAlbum(mFileItem);
                } else {

                    String oldPaths = SharedPrefUtil.getInstance().getString(ConstValue.EXTRA_FAVOURITED_FILES, "");
                    String[] listPaths = oldPaths.split(ConstValue.SEPARATE_SYMBOL);
                    String newPaths = "";
                    for (int i = 0; i < listPaths.length; i++) {
                        String path = listPaths[i];
                        if (!new File(path).exists() || path.equals(mFileItem.path)) {
                            continue;
                        }
                        newPaths += ConstValue.SEPARATE_SYMBOL + path;
                    }
                    SharedPrefUtil.getInstance().putString(ConstValue.EXTRA_FAVOURITED_FILES, newPaths);

                    listener.onDeleteFileToFavouriteAlbum(mFileItem);
                }
            }
        } else {
            if (mIsFavourited) {
                DbUtils.addFavourite(mFileItem);
            } else {
                DbUtils.deleteFavourite(mFileItem);
            }
        }
    }

    private boolean checkFileFavorited(FileItem fileItem) {
        String oldPaths = SharedPrefUtil.getInstance().getString(ConstValue.EXTRA_FAVOURITED_FILES, "");
        String[] listPaths = oldPaths.split(ConstValue.SEPARATE_SYMBOL);
        for (int i = 0; i < listPaths.length; i++) {
            String path = listPaths[i];
            if (!new File(path).exists()) {
                continue;
            }

            if (path.equals(fileItem.path)) {
                return true;
            }
        }
        return false;
    }

    public void updateUI(String nName, String nPath) {
        boolean renamed = DbUtils.deleteFavourite(mFileItem);
        mFileItem.name = nName;
        mFileItem.path = nPath;
        setNamePhoto(nName);
//        mFileItem.date_modified = String.valueOf(System.currentTimeMillis());
//        setDatePhoto(DateUtils.getDate(System.currentTimeMillis(), DateUtils.FORMAT_DATE_2));


        if (renamed) {
            DbUtils.addFavourite(mFileItem);
        }
    }

    public void updateImage() {
        String path = mFileItem.path;

        loadImage(mContext, ivPhoto, path);
    }

    public void loadImage(Context context, final ImageView ivJpgPhoto, String photoPath) {
        if (photoPath.contains(".gif")) {

            Glide.with(context).load(photoPath).asGif().diskCacheStrategy(DiskCacheStrategy.SOURCE).listener(new RequestListener<String, GifDrawable>() {
                @Override
                public boolean onException(Exception e, String model, Target<GifDrawable> target, boolean isFirstResource) {
                    hideDialog();
                    toastLoadGalleryFailed();
                    return false;
                }

                @Override
                public boolean onResourceReady(GifDrawable resource, String model, Target<GifDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
                    hideDialog();
                    return false;
                }
            }).into(ivJpgPhoto);
        } else {

            if (!FLAG_LOAD_GLIDE) {
                new DecodeImageAsync(mContext).execute(photoPath);
            } else {
                Glide.with(context)
                        .load(photoPath)
                        .listener(new RequestListener<String, GlideDrawable>() {
                            @Override
                            public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {
                                hideDialog();
                                toastLoadGalleryFailed();
                                return false;
                            }

                            @Override
                            public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
                                hideDialog();
                                return false;
                            }
                        })
                        .into(ivJpgPhoto);
            }
        }
    }

    public interface OnPhotoViewerListener {
        void onPhotoViewerFragmentReady();

        void onBackPhotoViewerFragment();

        void onMorePhotoViewerFragment(FileItem fileItem);

        void onSharePhotoViewerFragment(FileItem fileItem);

        void onDeletePhotoViewerFragment(FileItem fileItem);

        void onCreateFileToFavouriteAlbum(FileItem fileItem);

        void onDeleteFileToFavouriteAlbum(FileItem fileItem);

        void onUpdateToFavouriteAlbum();
    }

    class RegionBitmapResourceDecoder implements ResourceDecoder<InputStream, Bitmap> {
        private final BitmapPool bitmapPool;
        private final Rect region;

        public RegionBitmapResourceDecoder(Context context, Rect region) {
            this(Glide.get(context).getBitmapPool(), region);
        }

        public RegionBitmapResourceDecoder(BitmapPool bitmapPool, Rect region) {
            this.bitmapPool = bitmapPool;
            this.region = region;
        }

        @Override
        public Resource<Bitmap> decode(InputStream source, int width, int height) throws IOException {
            BitmapFactory.Options options = new BitmapFactory.Options();
            options.inSampleSize = 32;
            Bitmap bitmap = BitmapRegionDecoder.newInstance(source, false).decodeRegion(region, options);
            return BitmapResource.obtain(bitmap, bitmapPool);
        }

        @Override
        public String getId() {
            return getClass().getName() + region.toShortString(); // `+ region` is important for RESULT caching
        }
    }

    private class DecodeImageAsync extends AsyncTask<String, Void, Bitmap> {

        private Context mContext = null;

        public DecodeImageAsync(Context context) {
            mContext = context;
        }

        @Override
        protected Bitmap doInBackground(String... strings) {
            String path = strings[0];
            if (path == null || !new File(path).exists()) {
                return null;
            }

            int widthScreen = Utils.getScreenSize(mContext)[0];
            if (widthScreen <= 0) {
                return null;
            }
            return new ResizeImage(mContext).getBitmap(path, widthScreen);
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            onPhotoLoaded(bitmap);
        }
    }

    private void onPhotoLoaded(Bitmap bitmap) {
        ivPhoto.setImageBitmap(bitmap);
        hideDialog();
    }
}
