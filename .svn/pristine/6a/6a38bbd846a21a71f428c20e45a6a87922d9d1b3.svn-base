package com.photo.gallery.adapters;

import android.content.Context;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.photo.gallery.R;
import com.photo.gallery.models.AlbumItem;
import com.photo.gallery.utils.ConstValue;
import com.photo.gallery.utils.Flog;
import com.photo.gallery.utils.SharedPrefUtil;
import com.photo.gallery.utils.Utils;

import java.util.ArrayList;

public class AlbumsAdapter extends RecyclerView.Adapter<AlbumsAdapter.MyViewHolder> {

    private static final java.lang.String TAG = AlbumsAdapter.class.getSimpleName();
    public static boolean unAllSelected = false, allSelected = false;
    private Context mContext = null;
    private ArrayList<AlbumItem> mList = null;
    private int mItemSize = 0;
    private OnAlbumsAdapterListener listener = null;


    public AlbumsAdapter(Context context, ArrayList<AlbumItem> list) {
        mContext = context;
        mList = list;

        mItemSize = Utils.getScreenSize(context)[0] / ConstValue.NUM_OF_COLS_GRIDVIEW
            - (int) context.getResources().getDimension(R.dimen.margin_xxsmall_size);
    }

    @Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        View itemView = LayoutInflater.from(parent.getContext())
                .inflate((R.layout.item_album), parent, false);

        return new MyViewHolder(itemView);
    }

    @Override
    public void onBindViewHolder(MyViewHolder holder, final int position) {
        final AlbumItem item = mList.get(position);
        holder.name.setText(item.name);
        holder.size.setText(item.size);
        Glide.with(mContext)
                .load(item.pathFirstImg)
                .error(R.drawable.ic_no_image)
//                .skipMemoryCache(false)
                .override(mItemSize, mItemSize)
                .centerCrop()
                .into(holder.ivFirst);

        if (unAllSelected) {
            item.isSelected = false;
        } else if (allSelected) {
            item.isSelected = true;
        }

        final boolean isTicked = item.isSelected;
        Flog.d(TAG, "12 path=" + item.name + "_" + isTicked);
        showTicked(holder.viewTick, isTicked);

        holder.itemView.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                Flog.d(TAG,"album onLongClick");

                if (listener != null) {
                    unAllSelected = false;
                    allSelected = false;
                    item.isSelected = !item.isSelected;
                    listener.onItemAlbumLongClicked(position, item);
                }
                return true;
            }
        });
        holder.itemView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                if (listener != null) {
                    unAllSelected = false;
                    allSelected = false;
                    item.isSelected = !item.isSelected;
                    listener.onItemAlbumClicked(position, item);
                }
            }
        });
    }

    private void showTicked(View view, boolean isTicked) {
        view.setVisibility(isTicked ? View.VISIBLE : View.GONE);
    }

    @Override
    public int getItemCount() {
        return mList.size();
    }

    public AlbumsAdapter setListener(OnAlbumsAdapterListener listener) {
        this.listener = listener;
        return this;
    }

    public interface OnAlbumsAdapterListener {
        void onItemAlbumClicked(int position, AlbumItem album);

        void onItemAlbumLongClicked(int position, AlbumItem album);
    }

    public class MyViewHolder extends RecyclerView.ViewHolder {
        public TextView name, size;
        private ImageView ivFirst;
        private ViewGroup viewTick, viewInfo;

        public MyViewHolder(View view) {
            super(view);

            ImageView ivTicked = (ImageView) view.findViewById(R.id.iv_ticked);

            int defaultPrimary = ContextCompat.getColor(mContext, R.color.colorPrimary);
            int colorPrimary = SharedPrefUtil.getInstance().getInt(ConstValue.EXTRA_CURRENT_COLOR_PICKER, defaultPrimary);
            Utils.setColorViews(colorPrimary, ivTicked);

            name = (TextView) view.findViewById(R.id.tv_name_album);
            size = (TextView) view.findViewById(R.id.tv_size_album);
            ivFirst = (ImageView) view.findViewById(R.id.iv_first_of_album);
            viewTick = (ViewGroup) view.findViewById(R.id.view_tick);
            viewInfo = (ViewGroup) view.findViewById(R.id.view_info);

            if (mItemSize <= 0) {
                return;
            }

            ViewGroup.LayoutParams params = viewTick.getLayoutParams();
            params.width = mItemSize;
            params.height = mItemSize;
            viewTick.requestLayout();

//            image_container = (ViewGroup) itemView.findViewById(R.id.image_container);
            ViewGroup.LayoutParams params1 = ivFirst.getLayoutParams();
            params1.width = mItemSize;
            params1.height = mItemSize;
            ivFirst.requestLayout();

            ViewGroup.LayoutParams params2 = viewInfo.getLayoutParams();
            params2.width = mItemSize;
            params2.height = mItemSize;
            viewInfo.requestLayout();
        }
    }
}