package com.photo.gallery.fragments.options;

import android.content.Context;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import com.photo.gallery.R;
import com.photo.gallery.utils.ConstValue;
import com.photo.gallery.utils.SharedPrefUtil;

import java.util.ArrayList;

public class CropFragment extends BaseOptFragment {
    private RecyclerView mRecyclerView;
    private OnCropListener listener = null;
    private ArrayList<String> mList = new ArrayList<>();

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.layout_recyclerview, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        applyColor(view);
        initViews();
    }

    public void applyColor(View view) {
        int defaultPrimary = ContextCompat.getColor(mContext, R.color.colorPrimary);
        int colorPrimary = SharedPrefUtil.getInstance().getInt(ConstValue.EXTRA_CURRENT_COLOR_PICKER, defaultPrimary);

        ViewGroup viewGroup = view.findViewById(R.id.recycler_view);
        com.photo.gallery.utils.Utils.setColorViews(colorPrimary, viewGroup);
    }

    private void initViews() {

        View viewParent = getView();
        if (viewParent == null) {
            return;
        }
        viewParent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // do nothing.
            }
        });

        mRecyclerView = viewParent.findViewById(R.id.recycler_view);
        setupRecyclerview();
    }

    private void setupRecyclerview() {
        LinearLayoutManager lm = new LinearLayoutManager(mContext, LinearLayoutManager.HORIZONTAL, false);
        mRecyclerView.setLayoutManager(lm);

        initList();
        CropAdapter adapter = new CropAdapter(mContext, mList);
        mRecyclerView.setAdapter(adapter);
    }

    private void initList() {
        if (mList == null) {
            mList = new ArrayList<>();
        }
        mList.clear();
        String[] arrTypes = new String[]{
                getString(R.string.fit_image),
                "1:1",
                "2:3",
                "3:2",
                "3:4",
                "4:3",
                "4:5",
                "5:4",
                "5:7",
                "7:5",
                "9:16",
                "16:9",
                getString(R.string.circle)
        };
        for (int i = 0; i < arrTypes.length; i++) {
            mList.add(arrTypes[i]);
        }
    }

    public CropFragment setListener(OnCropListener listener) {
        this.listener = listener;
        return this;
    }

    public interface OnCropListener {
        void onTypeCropSelected(int type);
    }

    public class CropAdapter extends RecyclerView.Adapter<CropAdapter.ViewHolder> {
        private Context mContext;
        private ArrayList<String> mList = new ArrayList<>();
        private int curPosition = -1;

        public CropAdapter(Context context, ArrayList<String> list) {
            mContext = context;
            mList = list;
        }

        @Override
        public ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            LayoutInflater inflater = LayoutInflater.from(mContext);
            View view = inflater.inflate(R.layout.item_crop, parent, false);
            return new ViewHolder(view);
        }

        @Override
        public void onBindViewHolder(final ViewHolder holder, final int position) {

            holder.button.setText(mList.get(position));
            holder.itemView.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (curPosition != position) {

                        if (listener != null) {
                            listener.onTypeCropSelected(position);
                        }
                        curPosition = position;
                    }
                }
            });
        }

        @Override
        public int getItemCount() {
            return mList.size();
        }


        public class ViewHolder extends RecyclerView.ViewHolder {
            private Button button;

            public ViewHolder(View itemView) {
                super(itemView);
                button = (Button) itemView.findViewById(R.id.button);
            }
        }
    }
}
