package com.photo.gallery.fragments;

import android.app.ProgressDialog;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.resource.drawable.GlideDrawable;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.target.Target;
import com.google.android.gms.ads.AdSize;
import com.photo.gallery.R;
import com.photo.gallery.models.FileItem;
import com.photo.gallery.utils.DateUtils;
import com.photo.gallery.utils.DbUtils;
import com.photo.gallery.utils.FileUtil;
import com.photo.gallery.utils.Utils;
import com.wave.lib_crs.AdmobBannerHelper;

import java.util.ArrayList;
import java.util.Collections;

/**
 * Created by Tung on 3/23/2018.
 */

public class VideoViewerFragment extends BaseFragment implements View.OnClickListener {

    private static final String TAG = VideoViewerFragment.class.getSimpleName();
    private View btnBack, btnDelete, btnShare, btnMore;
    private ImageView btnFavourite;
    private TextView tvNamePhoto, tvDatePhoto;
    private ImageView videoPreview, btnOpenVideo;
    private FileItem mFileItem = null;
    private ProgressDialog progressDialog = null;
    private OnVideoViewerListener listener = null;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_video_viewer, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        initBannerAdmob();
        initDialog();
        initViews();
        if (listener != null) {
            listener.onVideoViewerFragmentReady();
        }
    }

    private void initBannerAdmob() {
        AdmobBannerHelper.init(mContext, (ViewGroup) getView().findViewById(R.id.admob_banner))
                .setAdUnitId(getString(R.string.smart_banner_ad_id))
                .setAdSize(AdSize.SMART_BANNER)
                .loadAd();
    }

    private void initViews() {

        View viewParent = getView();
        if (viewParent==null) {
            return;
        }
        viewParent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // DO NOTHING.
            }
        });
        btnBack = viewParent.findViewById(R.id.btn_back);
        btnFavourite = viewParent.findViewById(R.id.btn_favourite);
        btnDelete = viewParent.findViewById(R.id.btn_delete);
        btnShare = viewParent.findViewById(R.id.btn_share);
        btnMore = viewParent.findViewById(R.id.btn_more);

        tvNamePhoto = (TextView) viewParent.findViewById(R.id.tv_name_photo);
        tvDatePhoto = (TextView) viewParent.findViewById(R.id.tv_date_photo);

        videoPreview = (ImageView) viewParent.findViewById(R.id.video_preview);
        btnOpenVideo = (ImageView) viewParent.findViewById(R.id.btn_open_video);
    }

    private void initDialog() {
        progressDialog = new ProgressDialog(mContext);
        progressDialog.setCanceledOnTouchOutside(false);
    }

    private void showDialog() {
        if (progressDialog != null) {
            progressDialog.show();
        }
    }

    private void hideDialog() {
        if (progressDialog != null && progressDialog.isShowing()) {
            progressDialog.dismiss();
        }
    }

    public void open(FileItem fileItem) {
        mFileItem = fileItem;

        if (mFileItem == null) {
            toastLoadGalleryFailed();
            return;
        }


        mIsFavourited = checkFileFavorited1(mFileItem);
        toggleFavouriteIcon();

        showDialog();
        String path = mFileItem.path;
        Glide.with(mContext).load(path).listener(new RequestListener<String, GlideDrawable>() {
            @Override
            public boolean onException(Exception e, String model, Target<GlideDrawable> target, boolean isFirstResource) {
                hideDialog();
                toastLoadGalleryFailed();
                return false;
            }

            @Override
            public boolean onResourceReady(GlideDrawable resource, String model, Target<GlideDrawable> target, boolean isFromMemoryCache, boolean isFirstResource) {
                hideDialog();
                return false;
            }
        }).into(videoPreview);


        String name = mFileItem.name;
        setNamePhoto(name);

        String dateFormated = DateUtils.getDate(Utils.parseLong(mFileItem.date_modified), DateUtils.FORMAT_DATE_2);
        setDatePhoto(dateFormated);
    }

    private boolean checkFileFavorited1(FileItem fileItem) {
        ArrayList<FileItem> list = DbUtils.parseFavourites();
        for (int i = 0; i < list.size(); i++) {
            FileItem item = list.get(i);
            if (item.equals(fileItem)) {
                return true;
            }
        }
        return false;
    }

    private void setDatePhoto(String dateFormated) {
        tvDatePhoto.setText(dateFormated);
    }

    private void toastLoadGalleryFailed() {
        Toast.makeText(mContext, getString(R.string.load_gallery_failed), Toast.LENGTH_SHORT).show();
    }

    public void setValues() {

        btnBack.setOnClickListener(this);
        btnFavourite.setOnClickListener(this);
        btnDelete.setOnClickListener(this);
        btnShare.setOnClickListener(this);
        btnMore.setOnClickListener(this);
        btnOpenVideo.setOnClickListener(this);
    }

    private boolean mIsFavourited = false;
    private void toggleFavouriteIcon() {
        btnFavourite.setImageResource(mIsFavourited?R.drawable.ic_favorite_check:R.drawable.ic_favorite);
    }

    public VideoViewerFragment setListener(OnVideoViewerListener listener) {
        this.listener = listener;
        return this;
    }

    private long mLastClickTime = 0;

    @Override
    public void onClick(View view) {
        int id = view.getId();
        switch (id) {
            case R.id.btn_back:
                if (listener != null) {
                    listener.onBackVideoViewerFragment();
                }
                break;
            case R.id.btn_favourite:

                toggleFavouriteBtn();
                break;
            case R.id.btn_delete:
                if (listener != null) {
                    listener.onDeleteVideoViewerFragment(mFileItem);
                }
                break;
            case R.id.btn_share:
                if (listener!=null) {
                    listener.onShareVideoViewerFragment(mFileItem);
                }
                break;
            case R.id.btn_more:

                if (listener!=null) {
                    listener.onMoreVideoViewerFragment(mFileItem);
                }
                break;
            case R.id.btn_open_video:

                // mis-clicking prevention, using threshold of 1000 ms
                if (SystemClock.elapsedRealtime() - mLastClickTime < 1000){
                    return;
                }
                mLastClickTime = SystemClock.elapsedRealtime();

                // do your magic here

                try {
                    FileUtil.openVideoIntent(mContext, mFileItem.path);
                }catch (Exception ex){
                    toastLoadGalleryFailed();
                    ex.printStackTrace();
                }
                break;
        }
    }

    private void toggleFavouriteBtn() {
        mIsFavourited = !mIsFavourited;
        toggleFavouriteIcon();

        if (mIsFavourited) {
            DbUtils.addFavourite(mFileItem);
        } else {
            DbUtils.deleteFavourite(mFileItem);
        }
    }

    public void updateUI(String nName, String nPath) {
        boolean renamed = DbUtils.deleteFavourite(mFileItem);
        mFileItem.name = nName;
        mFileItem.path = nPath;
        setNamePhoto(nName);
//        mFileItem.date_modified = String.valueOf(System.currentTimeMillis());
//        setDatePhoto(DateUtils.getDate(System.currentTimeMillis(), DateUtils.FORMAT_DATE_2));


        if (renamed) {
            DbUtils.addFavourite(mFileItem);
        }
    }

    private void setNamePhoto(String name) {
        tvNamePhoto.setText(name);
    }

    public interface OnVideoViewerListener {
        void onVideoViewerFragmentReady();

        void onBackVideoViewerFragment();
        void onMoreVideoViewerFragment(FileItem fileItem);

        void onShareVideoViewerFragment(FileItem fileItem);

        void onDeleteVideoViewerFragment(FileItem fileItem);
    }
}
