package com.photo.gallery.fragments;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.net.Uri;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.EditorInfo;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.photo.gallery.R;
import com.photo.gallery.activities.ContentActivity;
import com.photo.gallery.adapters.MySection;
import com.photo.gallery.callback.OnDialogEventListener;
import com.photo.gallery.callback.OnFileDialogEventListener;
import com.photo.gallery.models.FileItem;
import com.photo.gallery.section_headergrid.SectionedRecyclerViewAdapter;
import com.photo.gallery.taskes.SelectAllTask;
import com.photo.gallery.utils.ConstValue;
import com.photo.gallery.utils.DbUtils;
import com.photo.gallery.utils.FileUtil;
import com.photo.gallery.utils.Flog;
import com.photo.gallery.utils.GalleryUtil;
import com.photo.gallery.utils.KeyboardUtil;
import com.photo.gallery.utils.SharedPrefUtil;
import com.photo.gallery.utils.Utils;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by Hoavt on 3/19/2018.
 */

public class SearchFragment extends BaseFragment implements View.OnClickListener, MySection.OnMySetionListener, SelectAllTask.OnSelectAllTaskListener {

    private static final java.lang.String TAG = SearchFragment.class.getSimpleName();
    private RecyclerView mRecyclerview = null;
    private EditText mEdInput = null;
    private ImageView mBtnBack, mBtnClear, mBtnSearch;
    private Map<String, ArrayList<FileItem>> mListAllFileSections = null, mOrgListAllFileSections = null;
    private SectionedRecyclerViewAdapter sectionAdapter = null;
    private OnSearchListener listener = null;
    private ArrayList<FileItem> mListAllFiles = null;
    private TextView mTvNoImgFound = null, tvNumOfMulti = null;
    private View btnBackMulti, btnDelMulti, btnMoreMulti;
    private ProgressDialog dialog = null;
    private boolean isLongClickedEvent = false;
    private HashMap<Integer, FileItem> listPositionChanged = new HashMap<>();
    private ViewGroup multiSelectToolbar, myToolbar;
    private AlertDialog dialogPopupFile = null;
    public static int FLAG_SHARE_IN_SEARCH = ContentActivity.FLAG_MODE_NONE;

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_search, container, false);
    }

    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        applyColor(view);
        initViews();
        if (listener != null) {
            listener.onSearchFragmentReady();
        }
    }

    private void applyColor(View view) {
        int defaultPrimary = ContextCompat.getColor(mContext, R.color.colorPrimary);
        int colorPrimary = SharedPrefUtil.getInstance().getInt(ConstValue.EXTRA_CURRENT_COLOR_PICKER, defaultPrimary);
        ViewGroup myToolbar = (ViewGroup) view.findViewById(R.id.my_toolbar);
        ViewGroup multiToolbar = (ViewGroup) view.findViewById(R.id.multi_toolbar);
        Utils.setColorViews(colorPrimary, myToolbar, multiToolbar);
    }

    private void initViews() {
        initDialog();

        View viewParent = getView();
        if (viewParent == null) {
            return;
        }
        viewParent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // DO NOTHING.
            }
        });
        mRecyclerview = (RecyclerView) viewParent.findViewById(R.id.recycler_view);
        mEdInput = (EditText) viewParent.findViewById(R.id.ed_input);
        mBtnBack = (ImageView) viewParent.findViewById(R.id.btn_back);
        mBtnClear = (ImageView) viewParent.findViewById(R.id.btn_clear);
        mBtnSearch = (ImageView) viewParent.findViewById(R.id.btn_search);
        mTvNoImgFound = (TextView) viewParent.findViewById(R.id.tv_no_image_found);

        myToolbar = (ViewGroup) viewParent.findViewById(R.id.my_toolbar);
        multiSelectToolbar = (ViewGroup) viewParent.findViewById(R.id.multi_toolbar);

        btnBackMulti = viewParent.findViewById(R.id.btn_back_multiselected);
        btnDelMulti = viewParent.findViewById(R.id.btn_delete_multiselected);
        btnMoreMulti = viewParent.findViewById(R.id.btn_more_multiselected);
        tvNumOfMulti = (TextView) viewParent.findViewById(R.id.tv_num_of_selected);
    }

    private void setTextNumOfSelected(int numOfSelected) {
        if (numOfSelected <= 0) {
            tvNumOfMulti.setText(getString(R.string.select_media));
        } else {
            tvNumOfMulti.setText(numOfSelected + " " + getString(R.string.selected));
        }
    }

    public void initialize(ArrayList<FileItem> listAllFiles, Map<String, ArrayList<FileItem>> listAllFileSections) {
        mListAllFiles = listAllFiles;

        mOrgListAllFileSections = listAllFileSections;

        mListAllFileSections = listAllFileSections;
        if (mListAllFiles == null || mListAllFileSections == null) {
            return;
        }

        Flog.d(TAG, "list search photo size=" + mListAllFileSections.size());


        setValues();
    }

    private void showKeyboard(boolean shown) {
        if (shown) {
            KeyboardUtil.showKeyboard(mContext, mEdInput);
        } else {
            KeyboardUtil.hideKeyboard(mContext, mEdInput);
        }
    }

    public void updateMap(Map<String, ArrayList<FileItem>> listAllImgSections) {
        mListAllFileSections = listAllImgSections;
        if (mListAllFileSections == null) {
            return;
        }

        Flog.d(TAG, "update search photo size=" + mListAllFileSections.size());

        sectionAdapter.removeAllSections();

        int cnt = 0;
        for (Map.Entry<String, ArrayList<FileItem>> entry : mListAllFileSections.entrySet()) {
            String key = entry.getKey();
            ArrayList<FileItem> items = mListAllFileSections.get(key);

            MySection section = new MySection(cnt, mContext, key, items).setListener(this);
            sectionAdapter.addSection(section);
            cnt++;
        }
        Flog.d(TAG, "update total sections=" + sectionAdapter.getItemCount() + "_vs_" + cnt);

        sectionAdapter.notifyDataSetChanged();
    }

    private void setValues() {
        // Create an instance of SectionedRecyclerViewAdapter
        sectionAdapter = new SectionedRecyclerViewAdapter();

//        GalleryUtil.logListFolder(mListAllImgSections);

        // Add your Sections
        int cnt = 0;
        for (Map.Entry<String, ArrayList<FileItem>> entry : mListAllFileSections.entrySet()) {
            String key = entry.getKey();
            ArrayList<FileItem> items = mListAllFileSections.get(key);

            MySection section = new MySection(cnt, mContext, key, items).setListener(this);
            sectionAdapter.addSection(section);
            cnt++;
        }
        Flog.d(TAG, "total sections=" + sectionAdapter.getItemCount() + "_vs_" + cnt);

        // Set up your RecyclerView with the SectionedRecyclerViewAdapter
        GridLayoutManager glm = new GridLayoutManager(mContext, ConstValue.NUM_OF_COLS_GRIDVIEW);
        glm.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
            @Override
            public int getSpanSize(int position) {
                switch (sectionAdapter.getSectionItemViewType(position)) {
                    case SectionedRecyclerViewAdapter.VIEW_TYPE_HEADER:
                        return ConstValue.NUM_OF_COLS_GRIDVIEW;
                    default:
                        return 1;
                }
            }
        });
        mRecyclerview.setLayoutManager(glm);
        mRecyclerview.setAdapter(sectionAdapter);


        mBtnBack.setOnClickListener(this);
        mBtnClear.setOnClickListener(this);
        mBtnSearch.setOnClickListener(this);

        btnBackMulti.setOnClickListener(this);
        btnDelMulti.setOnClickListener(this);
        btnMoreMulti.setOnClickListener(this);

        mEdInput.setOnEditorActionListener(new TextView.OnEditorActionListener() {
            @Override
            public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
                if (actionId == EditorInfo.IME_ACTION_SEARCH) {
                    performSearch();
                    return true;
                }
                return false;
            }
        });

        showNoImageFound(false);
    }

    private void performSearch() {
        String textInput = "";
        try {
            textInput = mEdInput.getText().toString();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        Flog.d(TAG, "textInput=" + textInput);


        setLongClickedEvent(false);
        showDialog();

        ArrayList<FileItem> listFileFiltered = GalleryUtil.filterByNameFile(mListAllFiles, textInput);
        Flog.d(TAG, "filered:" + mListAllFiles.size() + "_" + listFileFiltered.size());
        if (listFileFiltered.size() <= 0) {
            showNoImageFound(true);
        } else {
            showNoImageFound(false);
            updateMap(GalleryUtil.groupListSectionByDate(listFileFiltered));
        }
        showKeyboard(false);

        hideDialog();
    }

    @Override
    public void onClick(View view) {
        int id = view.getId();
        switch (id) {
            case R.id.btn_back:
                if (listener != null) {
                    listener.onBackSearchFragment();
                }
                break;
            case R.id.btn_clear:
                clearText();
                break;
            case R.id.btn_search:

                performSearch();
                break;
            case R.id.btn_back_multiselected:

                handleBackMultiSelected();
                break;
            case R.id.btn_delete_multiselected:

                if (listener != null) {
                    listener.onDeleteFileSearchFragment();
                }
                break;
            case R.id.btn_more_multiselected:

                showPopupFileDialog();
                break;
        }
    }

    private void initPopupFileDialog() {
        // setup the alert builder
        AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
        // add a list
        String[] animals = {getString(R.string.share), getString(R.string.copy),
                getString(R.string.move), getString(R.string.select_all),
                getString(R.string.unselect_all)};
        builder.setItems(animals, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                switch (which) {
                    case 0: // share
                        actionShareFiles();
                        break;
                    case 1: // copy
                        if (listener != null) {
                            listener.onCopyFileSearchFragment(getListFromMap(listPositionChanged));
                        }
                        break;
                    case 2: // move
                        if (listener != null) {
                            listener.onMoveFileSearchFragment(getListFromMap(listPositionChanged));
                        }
                        break;
                    case 3: // select all
                        actionSelectAll();
                        break;
                    case 4: // unselect all
                        actionUnselectAll();
                        break;
                }
                dialog.dismiss();
            }
        });

        // create and open the alert dialogPopupFile
        dialogPopupFile = builder.create();

        Window window = dialogPopupFile.getWindow();
        WindowManager.LayoutParams wlp = window.getAttributes();

        wlp.gravity = Gravity.TOP | Gravity.RIGHT;
        wlp.flags &= ~WindowManager.LayoutParams.FLAG_DIM_BEHIND;
        window.setAttributes(wlp);
    }

    private ArrayList<FileItem> getListFromMap(HashMap<Integer, FileItem> mapPosChanged) {
        ArrayList<FileItem> list = new ArrayList<>();
        for (Map.Entry<Integer, FileItem> entry : mapPosChanged.entrySet()) {
            FileItem fileItem = entry.getValue();
            list.add(fileItem);
        }
        return list;
    }

    public void actionUnselectAll() {
        unselectAll();
        setTextNumOfSelected(0);
    }

    private void actionSelectAll() {

        selectAll();
    }

    public void selectAll() {

        MySection.allSelected = true;
        MySection.unAllSelected = false;
//        sectionAdapter.notifyDataSetChanged();

        showDialog();
        SelectAllTask task = new SelectAllTask(mContext, mListAllFileSections).setListener(this);
        task.execute();
    }

    private void actionShareFiles() {

        FLAG_SHARE_IN_SEARCH = ContentActivity.FLAG_MODE_ENABLE;
        ContentActivity.FLAG_OPEN_WITH_ACTION = ContentActivity.FLAG_MODE_DISABLE;
        FilesAlbumFragment.FLAG_SHARE_IN_FILEALBUM = ContentActivity.FLAG_MODE_DISABLE;
        boolean shown = showHintSelectImgsDialog(mContext.getString(R.string.share));
        if (shown) {
            return;
        }

        shareFilesByPos(listPositionChanged);
    }

    private void shareFilesByPos(HashMap<Integer, FileItem> listPosChanged) {
        Uri uries[] = new Uri[listPosChanged.size()];

        int idx = 0;
        for (Map.Entry<Integer, FileItem> entry : listPosChanged.entrySet()) {
            int changedIdx = entry.getKey();
            FileItem fileItem = entry.getValue();
            Flog.d(TAG, "3 share changedIdx is " + changedIdx + "_" + fileItem.path);
            uries[idx] = Uri.fromFile(new File(fileItem.path));
            idx++;
        }

        Flog.d(TAG, "share changedIdxes is " + uries.length);
        FileUtil.share(mContext, uries);
    }

    private void showPopupFileDialog() {
        if (dialogPopupFile != null && !dialogPopupFile.isShowing()) {
            dialogPopupFile.show();
        }
    }

    public void deleteFilesSelected(OnDialogEventListener listener) {

        boolean shown = showHintSelectImgsDialog(mContext.getString(R.string.delete));
        if (shown) {
            return;
        }

        //        printList(listPositionChanged);
        int len = listPositionChanged.size();
        FileItem[] items = new FileItem[len];
        int idx = 0;
        for (Map.Entry<Integer, FileItem> entry : listPositionChanged.entrySet()) {
            int key = entry.getKey();
            FileItem item = entry.getValue();
            items[idx] = item;
            idx++;
        }
        showDeleteDialog(mContext, listener, items);
    }

    public void deleteFilesSelected(OnFileDialogEventListener listener) {

        boolean shown = showHintSelectImgsDialog(mContext.getString(R.string.delete));
        if (shown) {
            return;
        }

        //        printList(listPositionChanged);
        int len = listPositionChanged.size();
        FileItem[] items = new FileItem[len];
        int idx = 0;
        for (Map.Entry<Integer, FileItem> entry : listPositionChanged.entrySet()) {
            int key = entry.getKey();
            FileItem item = entry.getValue();
            items[idx] = item;
            idx++;
        }
        showDeleteDialog(mContext, listener, items);
    }

    private boolean showHintSelectImgsDialog(String action) {
        if (listPositionChanged == null || listPositionChanged.size() <= 0) {
            String message = mContext.getString(R.string.please_select_media_for)
                    + " " + action;
            Toast.makeText(mContext, message, Toast.LENGTH_SHORT).show();
            return true;
        }
        return false;
    }

    private void showDeleteDialog(final Context context, final OnFileDialogEventListener listener, final FileItem... items) {

        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        String title = context.getString(R.string.delete);
        String message = context.getString(R.string.confirm_delete_dialog);
        alert.setCancelable(false)
                .setTitle(title)
                .setMessage(message)
                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                })
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        int len = items.length;
                        Uri[] uries = new Uri[len];
                        String[] paths = new String[len];

                        ArrayList<FileItem> list = new ArrayList<>();
                        String mes = "";
                        for (int i = 0; i < len; i++) {
                            FileItem item = items[i];
                            paths[i] = item.path;
                            uries[i] = Uri.fromFile(new File(item.path));

                            boolean success = FileUtil.delete(context, uries[i]);
                            if (success) {
                                list.add(item);
                                DbUtils.deleteFavourite(item);
                            } else {
                                mes += paths[i] + "\n";
                            }
                        }

                        if (mes.equals("")) {
                            FileUtil.toastSuccess(context, context.getString(R.string.delete));
                            FileUtil.scanMediaStore(context, paths);
                        } else {
                            FileUtil.toastFailed(context, context.getString(R.string.delete) + ":\n" + mes);
                        }

                        FileItem[] arrItems = new FileItem[list.size()];
                        for (int i = 0; i < list.size(); i++) {
                            arrItems[i] =list.get(i);
                        }
                        if (listener != null) {
                            handleBackMultiSelected();
                            listener.onOk(arrItems);
                        }
                    }
                }).show();
    }

    private void showDeleteDialog(final Context context, final OnDialogEventListener listener, final FileItem... fileItem) {

        AlertDialog.Builder alert = new AlertDialog.Builder(context);
        String title = context.getString(R.string.delete);
        String message = context.getString(R.string.confirm_delete_dialog);
        alert.setCancelable(false)
                .setTitle(title)
                .setMessage(message)
                .setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                        if (listener != null) {
                            listener.onCancel();
                        }
                    }
                })
                .setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {

                        int len = fileItem.length;
                        Uri[] uries = new Uri[len];
                        String[] paths = new String[len];

                        String mes = "";
                        for (int i = 0; i < len; i++) {
                            FileItem item = fileItem[i];
                            paths[i] = item.path;
                            uries[i] = Uri.fromFile(new File(item.path));

                            boolean success = FileUtil.delete(context, uries[i]);
                            if (success) {
                                DbUtils.deleteFavourite(item);
                            } else {
                                mes += paths[i] + "\n";
                            }
                        }

                        if (mes.equals("")) {
                            FileUtil.toastSuccess(context, context.getString(R.string.delete));
                            FileUtil.scanMediaStore(context, paths);
                        } else {
                            FileUtil.toastFailed(context, context.getString(R.string.delete) + ":\n" + mes);
                        }
                        if (listener != null) {
                            handleBackMultiSelected();
                            listener.onOk();
                        }
                    }
                }).show();
    }

    public void printList(HashMap<Integer, FileItem> map) {
        for (Map.Entry<Integer, FileItem> entry : map.entrySet()) {
            int index = entry.getKey();
            Flog.d(TAG, "file map " + index + ": " + index + "_file: " + entry.getValue());
        }
    }

    private void handleBackMultiSelected() {

        setLongClickedEvent(false);
        unselectAll();

        showMyToolbar(true);
    }

    public void unselectAll() {

        MySection.unAllSelected = true;
        MySection.allSelected = false;

//        for (int i = 0; i < listPositionChanged.size(); i++) {
//            int changedIdx = listPositionChanged.get(i);
//            sectionAdapter.notifyItemChanged(changedIdx);
//        }

        for (Map.Entry<Integer, FileItem> entry : listPositionChanged.entrySet()) {
            int changedIdx = entry.getKey();
            Flog.d(TAG, "changedIdx is " + changedIdx);
            sectionAdapter.notifyItemChanged(changedIdx);
        }

        listPositionChanged.clear();
    }

    private void initDialog() {
        dialog = new ProgressDialog(mContext);
        dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
            @Override
            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                if (keyCode == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
                    return true; // Consumed
                }
                return false;
            }
        });
        dialog.setCanceledOnTouchOutside(false);

        initPopupFileDialog();
    }

    private void showDialog() {
        if (dialog != null) {
            dialog.show();
        }
    }

    private void hideDialog() {
        if (dialog != null && dialog.isShowing()) {
            dialog.dismiss();
        }
    }

    private void clearText() {
        mEdInput.setText("");
    }

    public SearchFragment setListener(OnSearchListener listener) {
        this.listener = listener;
        return this;
    }

    public void reset() {
        showKeyboard(false);
        hideDialog();
    }

    public void show() {
        showDialog();

        setLongClickedEvent(false);
        updateMap(mOrgListAllFileSections);
        showNoImageFound(false);
        clearText();
        showKeyboard(true);
        showMyToolbar(true);

        hideDialog();
    }

    @Override
    public void onItemInSetionLongClicked(int index, int position, FileItem file) {
        if (!isLongClickedEvent) {
            int positionInAdapter = getPositionInAdapter(index, position);
            listPositionChanged.put(Integer.valueOf(positionInAdapter), file);
            Flog.d(TAG, "isLongClickedEvent:p1=" + index + "_p2=" + position + "_clicked=" + positionInAdapter);
            sectionAdapter.notifyItemChanged(positionInAdapter);

            showMyToolbar(false);
            setTextNumOfSelected(1);
            showKeyboard(false);
            setLongClickedEvent(true);
        } else {
            handleItemSearchClicked(index, position, file);
        }
    }

    private void handleItemSearchClicked(int index, int position, FileItem file) {
        int positionInAdapter = getPositionInAdapter(index, position);
        if (file.isSelected) {
            listPositionChanged.put(Integer.valueOf(positionInAdapter), file);
        } else {
            Integer obj = Integer.valueOf(positionInAdapter);
            if (listPositionChanged.containsKey(obj)) {
                listPositionChanged.remove(obj);
            }
        }
        sectionAdapter.notifyItemChanged(positionInAdapter);

        if (listPositionChanged.size() <= 0) {
            MySection.unAllSelected = true;
        }

        setTextNumOfSelected(listPositionChanged.size());
    }

    public void setLongClickedEvent(boolean longClickedEvent) {
        isLongClickedEvent = longClickedEvent;
    }

    private void showMyToolbar(boolean shown) {
        myToolbar.setVisibility(shown ? View.VISIBLE : View.GONE);
        multiSelectToolbar.setVisibility(!shown ? View.VISIBLE : View.GONE);
    }

    private int getPositionInAdapter(int index, int position) {
        int positionInAdapter = 0;
        int cnt = 0;
        // Add your Sections
        for (Map.Entry<String, ArrayList<FileItem>> entry : mListAllFileSections.entrySet()) {
            if (index <= cnt) {
                break;
            }

            String key = entry.getKey();
            ArrayList<FileItem> items = mListAllFileSections.get(key);
            positionInAdapter += (1 + items.size());

            cnt++;
        }

        positionInAdapter += (1 + position);
        return positionInAdapter;
    }

    @Override
    public void onItemInSetionClicked(int index, int position, FileItem file) {
        if (isLongClickedEvent) {
            handleItemSearchClicked(index, position, file);
        } else {
            showKeyboard(false);
            file.isSelected = false;
            openFileViewer(file);
        }
    }

    private void openFileViewer(FileItem file) {
        Flog.d(TAG, "openFileSearchViewer=" + file);
        listener.openFileViewerFromSearch(file);
    }

    public void showNoImageFound(boolean shown) {
        mRecyclerview.setVisibility(shown ? View.GONE : View.VISIBLE);
        mTvNoImgFound.setVisibility(shown ? View.VISIBLE : View.GONE);
    }

    @Override
    public void onSelectAllLoading(int positionInAdapter) {
        int percent = positionInAdapter * 100 / (mListAllFiles.size() + mListAllFileSections.size());
        dialog.setMessage(mContext.getString(R.string.selecting) + " " + percent + "%");
        sectionAdapter.notifyItemChanged(positionInAdapter);
    }

    @Override
    public void onSelectAllFinished(HashMap<Integer, FileItem> listPositionChanged) {
        this.listPositionChanged = listPositionChanged;
        Flog.d(TAG, "32 addAllPosChanged=" + listPositionChanged.size());
        setTextNumOfSelected(listPositionChanged.size());
        hideDialog();
    }

    public void updateUI(ArrayList<FileItem> listAllFiles, Map<String, ArrayList<FileItem>> listAllFileSections) {

        if (sectionAdapter == null) {
            Flog.d(TAG, "4recycler not init");
            return;
        }

        mListAllFiles = listAllFiles;

        mOrgListAllFileSections = listAllFileSections;

        mListAllFileSections = listAllFileSections;
        if (mListAllFiles == null || mListAllFileSections == null) {
            return;
        }

        Flog.d(TAG, "4list search photo size=" + mListAllFileSections.size());

        sectionAdapter.removeAllSections();
        // Add your Sections
        int cnt = 0;
        for (Map.Entry<String, ArrayList<FileItem>> entry : mListAllFileSections.entrySet()) {
            String key = entry.getKey();
            ArrayList<FileItem> items = mListAllFileSections.get(key);

            MySection section = new MySection(cnt, mContext, key, items).setListener(this);
            sectionAdapter.addSection(section);
            cnt++;
        }
        Flog.d(TAG, "4total sections=" + sectionAdapter.getItemCount() + "_vs_" + cnt);

        sectionAdapter.notifyDataSetChanged();

        setTextNumOfSelected(0);
    }

    public interface OnSearchListener {
        void onSearchFragmentReady();

        void onBackSearchFragment();

        void openFileViewerFromSearch(FileItem file);

        void onDeleteFileSearchFragment();

        void onCopyFileSearchFragment(ArrayList<FileItem> list);

        void onMoveFileSearchFragment(ArrayList<FileItem> list);
    }
}
